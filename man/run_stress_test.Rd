% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_stress_test.R
\name{run_stress_test}
\alias{run_stress_test}
\title{Run stress testing for provided asset type.}
\usage{
run_stress_test(
  asset_type,
  input_path_project_specific,
  input_path_project_agnostic,
  output_path,
  lgd_senior_claims = 0.45,
  lgd_subordinated_claims = 0.75,
  terminal_value = 0,
  risk_free_rate = 0.02,
  discount_rate = 0.02,
  div_netprofit_prop_coef = 1,
  shock_year = 2030,
  term = 2,
  company_exclusion = TRUE
)
}
\arguments{
\item{asset_type}{String holding asset_type, for allowed value compare
\code{asset_types_lookup}.}

\item{input_path_project_specific}{String holding path to project specific
data.}

\item{input_path_project_agnostic}{String holding path to project agnostic
data.}

\item{output_path}{String holding path to which output files are written.
NOTE: Results and logs per run are saved to a subdirectory of output_path
that will be generated automatically. The name of the subdirectory is the
timestamp of the run of the analysis.}

\item{lgd_senior_claims}{Numeric, holding the loss given default for senior
claims, for accepted value range check \code{lgd_senior_claims_range_lookup}.}

\item{lgd_subordinated_claims}{Numeric, holding the loss given default for
subordinated claims, for accepted value range check
\code{lgd_subordinated_claims_range_lookup}.}

\item{terminal_value}{Numeric. A ratio to determine the share of the
discounted value used in the terminal value calculation beyond the
projected time frame. For accepted range compare
\code{terminal_value_range_lookup}.}

\item{risk_free_rate}{Numeric that indicates the risk free rate of interest.
For accepted range compare \code{risk_free_rate_range_lookup}.}

\item{discount_rate}{Numeric, that holds the discount rate of dividends per
year in the DCF. For accepted range compare \code{discount_rate_range_lookup}.}

\item{div_netprofit_prop_coef}{Numeric. A coefficient that determines how
strongly the future dividends propagate to the company value. For accepted
range compare \code{div_netprofit_prop_coef_range_lookup}.}

\item{shock_year}{Numeric, holding year the shock is applied. For accepted
range compare \code{shock_year_range_lookup}.}

\item{term}{Numeric. A coefficient that determines for which maturity the
expected loss should be calculated in the credit risk section. For accepted
range compare \code{term_range_lookup}.}

\item{company_exclusion}{Boolean, indicating if companies provided in dataset
excluded_companies.csv shall be excluded.}
}
\description{
This function runs the transition risk stress test. It can be desirable to
understand sensitivities of the scenarios, in which case the user may pass a
vector of values to one (and only one) of the detail arguments. This will
result in running the analysis multiple times in a row with the argument
varied. NOTE: argument \code{asset_type} is not iterateable.
}
\examples{
\dontshow{if (r2dii.climate.stress.test:::run_example()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
library(fs)

input_specific <- "/home/mauro/tmp/st/ST_TESTING_BONDS/inputs"
input_agnostic <- "/home/mauro/tmp/st/ST_INPUTS_MASTER"
output <- tempdir()
fs::dir_create(output)

# `run_stress_test()` for bonds with default arguments
stress_test_arguments[c("name", "default")]

run_stress_test(
  asset_type = "bonds",
  input_path_project_specific = input_specific,
  input_path_project_agnostic = input_agnostic,
  output_path = output
)

# Similar, but iterating over the `term` argument with values 1 and 2
run_stress_test("bonds", input_specific, input_agnostic, output, term = 1:2)

# Inspect the outputs directory
fs::dir_tree(output)

# Inspect some lines of the log for the first run
(logs <- fs::dir_ls(output, regexp = "log.*[.]txt$", recurse = TRUE))
first_run <- 1
some_lines <- 20
writeLines(head(readLines(logs[[first_run]]), some_lines))

# Read the one kind of result from the second run
this_result <- "bonds_comp_el.*[.]csv$"
second_run <- 2
path <- fs::dir_ls(output, regexp = this_result, recurse = TRUE)[[second_run]]
readr::read_csv(path)
\dontshow{\}) # examplesIf}
}
